datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Plan {
  Free
  Clinica
  Hospital
}

enum Role {
  ADMIN
  USER
}

enum UserType {
  Doctor
  Enfermera
  Otro
}

model Clinic {
  id      String    @id @default(uuid())
  name    String    @unique
  address String?
  phone   String?
  plan    Plan      @default(Free)
  users   User[]
  patients Patient[]
}

model User {
  id                 String               @id @default(uuid())
  username           String               @unique
  password           String
  role               Role                 @default(USER)
  type               UserType             @default(Otro)
  clinicId           String?
  clinic             Clinic?              @relation(fields: [clinicId], references: [id], onDelete: SetNull)
  doctorAvailabilities DoctorAvailability[]

  @@index([clinicId])
}

model DoctorAvailability {
  id          String  @id @default(uuid())
  userId      String
  dayOfWeek   Int // 0=Lunes, 6=Domingo
  startTime   String
  endTime     String
  isAvailable Boolean @default(false)
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, dayOfWeek])
  @@index([userId])
}

model Patient {
  id           String        @id @default(uuid())
  name         String
  dob          DateTime?
  gender       String
  address      String?
  phone        String?
  email        String?
  clinicId     String
  clinic       Clinic        @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  vitals       Vital[]
  medications  Medication[]
  appointments Appointment[]
  procedures   Procedure[]
  notes        PatientNote[]

  @@index([clinicId])
}

model PatientNote {
  id            String   @id @default(uuid())
  patientId     String
  date          DateTime
  provider      String
  transcription String   @db.Text
  summary       String   @db.Text
  patient       Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@index([patientId])
}

model Vital {
  id        String   @id @default(uuid())
  patientId String
  date      DateTime
  hr        Float
  bp        String
  temp      Float
  rr        Float
  provider  String
  patient   Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@index([patientId])
}

model Medication {
  id                  String   @id @default(uuid())
  patientId           String
  name                String
  dosage              String
  frequency           String
  prescribedDate      DateTime
  prescribingProvider String
  patient             Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@index([patientId])
}

model Appointment {
  id              String @id @default(uuid())
  patientId       String
  date            DateTime
  time            String
  reason          String
  status          String // 'Programada', 'Completada', 'Cancelada'
  visitProvider   String
  billingProvider String
  patient         Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@index([patientId])
  @@index([date, visitProvider])
}

model Procedure {
  id                 String   @id @default(uuid())
  patientId          String
  date               DateTime
  name               String
  notes              String?  @db.Text
  performingProvider String
  patient            Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@index([patientId])
}

model MasterMedication {
    id   String @id @default(uuid())
    name String @unique
}

model MasterProcedure {
    id   String @id @default(uuid())
    name String @unique
}
