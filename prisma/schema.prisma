// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                String               @id @default(uuid())
  email             String               @unique
  firstName         String
  paternalLastName  String
  maternalLastName  String?
  password          String
  role              Role                 @default(USER)
  type              UserType             @default(Otro)
  clinicId          String?
  clinic            Clinic?              @relation(fields: [clinicId], references: [id])
  DoctorAvailability DoctorAvailability[]

  @@index([clinicId])
}

model Clinic {
  id      String    @id @default(uuid())
  name    String    @unique
  address String?
  phone   String?
  plan    Plan      @default(Free)
  users   User[]
  patients Patient[]
}

model Patient {
  id                String          @id @default(uuid())
  firstName         String
  paternalLastName  String
  maternalLastName  String?
  dob               DateTime?       @db.Date
  gender            String
  address           String?
  phone             String?
  email             String?
  clinicId          String
  clinic            Clinic          @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  vitals            Vital[]
  medications       Medication[]
  appointments      Appointment[]
  procedures        Procedure[]
  notes             PatientNote[]

  @@index([clinicId])
}

model PatientNote {
  id             String   @id @default(uuid())
  patientId      String
  patient        Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)
  date           DateTime
  provider       String
  transcription  String?  @db.Text
  summary        String?  @db.Text

  @@index([patientId])
}

model Vital {
  id        String   @id @default(uuid())
  patientId String
  patient   Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)
  date      DateTime @db.Date
  hr        Int
  bp        String
  temp      Decimal
  rr        Int
  provider  String

  @@index([patientId])
}

model Medication {
  id                  String   @id @default(uuid())
  patientId           String
  patient             Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)
  name                String
  dosage              String
  frequency           String
  prescribedDate      DateTime @db.Date
  prescribingProvider String

  @@index([patientId])
}

model Procedure {
  id                 String   @id @default(uuid())
  patientId          String
  patient            Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)
  date               DateTime @db.Date
  name               String
  notes              String?
  performingProvider String

  @@index([patientId])
}


model Appointment {
  id              String   @id @default(uuid())
  patientId       String
  patient         Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)
  date            DateTime @db.Date
  time            String
  reason          String
  status          String   // Programada, Completada, Cancelada
  visitProvider   String
  billingProvider String

  @@index([patientId])
}

model DoctorAvailability {
  id          String  @id @default(uuid())
  userId      String
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  dayOfWeek   Int // 0 = Lunes, ..., 6 = Domingo
  startTime   String
  endTime     String
  isAvailable Boolean @default(false)

  @@unique([userId, dayOfWeek])
  @@index([userId])
}

model MasterMedication {
    id String @id @default(uuid())
    name String @unique
}

model MasterProcedure {
    id String @id @default(uuid())
    code String @unique
    name String @unique
}


enum Role {
  ADMIN
  USER
}

enum UserType {
    Doctor
    Enfermera
    Otro
}

enum Plan {
    Free
    Clinica
    Hospital
}
